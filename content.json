{"pages":[],"posts":[{"title":"逍遥","text":"愿人间走一遭，圆满三界六道，看透是非善恶，从此福来心至，皆是逍遥。","link":"/2020/03/05/my-first-page/"},{"title":"关于清除浮动和BFC","text":"清除浮动 方法 BFC(Block formatting context) 触发BFC的条件 特点和用途 清除浮动#清除浮动的本质：为了解决浮动子元素的父盒子高度为0的问题希望能让内容浮动来撑开父盒子 方法# clear:both浮动盒子后添加一个空标签，给sytle 1&lt;div style=\"clear:both\"&gt;&lt;/div&gt; 父级添加 overflow：hidden/auto因为触发BFC，BFC可清除浮动 after伪元素/双伪元素清除浮动 1234567891011121314151617181920//1.clearFix:after { content:\"\"; display:block; height:0 ; visibility: hidden; clear:both;}//2.clearFix:before, .clearFix:after { content:\"\"; display:block}.clearfix:after { clear:both}.clearfix { *zoom:1 //兼容ie 6 7} BFC(Block formatting context)#块级格式化上下文 独立渲染的区域块级元素 display: block/list-iten/table 触发BFC的条件# float不为none，即浮动元素 position absolute/fixed display的值是inline-block、table-cell、flex、table-caption或者inline-flex overflow的值不是visible(添加BFC常用：一般不会有副作用) 特点和用途# 因为BFC 计算时会计算浮动的盒子的高度所以 常用于 清除浮动 因为同一个BFC的两个相邻的Box会发生margin重叠利用BFC避免margin重叠，如在其中一个盒子外包装多一个div即给新的BFC 因为BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之也如此所以div 封装一个独立的组件的原因 因为BFC的区域不会和浮动的盒子产生交集，会紧贴边缘所以用于自适应 – 自动的适应宽度，这时候就形成了一个两栏自适应的布局。 参考https://blog.csdn.net/sinat_36422236/article/details/88763187","link":"/2020/03/06/css/css-float/"},{"title":"零星的知识点","text":"css html - web存储 cookie Storage js数据类型 symbol 标识值 css#css 三大特性： 层叠： 覆盖作用 继承： 继承字体 文本属性 优先： 多指权重 权重 !important &gt; 行内样式 &gt; id &gt; class &gt; 标签 &gt; 继承样式的权重为0 html - web存储#在客户端存储数据 cookie#由于cookie，不适合大量数据存储，而且它们是由于每个对服务器的请求来传递的，速度慢且效率不高cookie是浏览器提供的一种机制，cookie机制将信息存储于用户硬盘常用于： 保存用户登录状态 跟踪用户行为 Storage#localStorage 没有时间限制 第二天 一周 一年 依旧存在sessionStorage 针对一个session 周期进行数据存储，当用户浏览器关闭，数据会被删除 js数据类型#由于原来的6种+es6 新引入的symbol，现在7种类型了undefined，null boolean， string， number，object，symbol symbol 标识值#es6/菜鸟教程 引入symbol的原因：唯一的标识，如若引入别人提供的对象，又想为对象添加新的方法(mixin模式)，又要防止重名 作为属性名的symbol 不能用 点获取，只能用[]","link":"/2020/03/06/star-knowledge/"},{"title":"关于es6之Set和Map","text":"宏观认识 set weakSet Map weakMap 参考看文档 es6 (http://caibaojian.com/es6/set-map.html) (https://es6.ruanyifeng.com/#docs/symbol) 宏观认识#set#类数组结构 但是成员的值都是唯一的，没有重复的值 123//常用于 做数组去重处理Array.from(new Set(arr))[... new Set(arr)] weakSet#弱引用即垃圾回收机制不考虑WeakSet对该对象的引用也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于WeakSet之中。这个特点意味着，无法引用WeakSet的成员，因此WeakSet是不可遍历的。作用：暂时缓存 防止内存泄漏 Map#类对象，但是键的类型不限于字符串其实真正的健意义是内存地址绑定的即只要内存地址不一样，就是俩个键，=&gt; 解决了同名内容属性相同碰撞的问题 weakMap#与Map 区别是只 接受对象和null做键名弱引用 应用场景 在网页的Dom元素上添加数据，使用weakMap。但dom被清除了，就没有对象应用weakMap了，而弱引用不会被垃圾回收机制认可为被weakMap引用了，所以对应的weakMAp记录也会被自动移除解决了内存泄漏 部署私用属性类的内部属性用weakMap，若删除实列，他们随之也会消失，不会造成内存泄漏","link":"/2020/03/07/js/es6/es6-Set-Map/"}],"tags":[{"name":"my","slug":"my","link":"/tags/my/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"知识","slug":"知识","link":"/tags/%E7%9F%A5%E8%AF%86/"},{"name":"es6","slug":"es6","link":"/tags/es6/"}],"categories":[{"name":"css","slug":"css","link":"/categories/css/"},{"name":"html","slug":"html","link":"/categories/html/"},{"name":"js","slug":"js","link":"/categories/js/"}]}